using System;
using DailyRoutines.Abstracts;
using DailyRoutines.Infos;
using DailyRoutines.Managers;
using Dalamud.Game.Gui.ContextMenu;
using Dalamud.Game.Text.SeStringHandling;
using Dalamud.Game.Text.SeStringHandling.Payloads;
using Dalamud.Utility;
using FFXIVClientStructs.FFXIV.Client.UI.Agent;
using FFXIVClientStructs.FFXIV.Client.UI.Misc;
using Lumina.Excel.Sheets;

namespace DailyRoutines.ModuleTemplate;

public class CopyItemNameModule : DailyModuleBase
{
    private static readonly string CopyItemNameString = LuminaGetter.GetRow<Addon>(159)!.Value.Text.ExtractText();
    private static readonly string GlamoursString     = LuminaGetter.GetRow<CircleActivity>(18)!.Value.Name.ExtractText();

    private readonly CopyItemNameMenuItem MenuItem        = new (CopyItemNameString);
    private readonly CopyItemNameMenuItem GlamourMenuItem = new ($"{CopyItemNameString} ({GlamoursString})");

    public override ModuleInfo Info { get; } = new ()
    {
        Title       = GetLoc("CopyItemName"),
        Description = GetLoc("CopyItemNameDescription"),
        Category    = ModuleCategories.UIOptimization,
        Author      = ["Nukoooo"],
    };

    public override void Init()
    {
        DService.ContextMenu.OnMenuOpened += OnContextMenuOpened;
    }

    public override void Uninit()
    {
        DService.ContextMenu.OnMenuOpened -= OnContextMenuOpened;

        base.Uninit();
    }

    private unsafe void OnContextMenuOpened(IMenuOpenedArgs args)
    {
        var type = args.MenuType;

        if (type == ContextMenuType.Inventory)
        {
            if (args.Target is MenuTargetInventory { TargetItem: { ItemId: > 0 } item })
            {
                MenuItem.SetRawItemId(item.ItemId);

                args.AddMenuItem(MenuItem.Get());

                if (item.GlamourId == 0)
                    return;

                GlamourMenuItem.SetRawItemId(item.GlamourId);
                args.AddMenuItem(GlamourMenuItem.Get());
            }

            return;
        }

        if (string.IsNullOrWhiteSpace(args.AddonName) || args.AddonName == "FreeCompanyExchange")
            return;

        var agent = (AgentContext*)args.AgentPtr;

        var contextMenu = agent->CurrentContextMenu;

        var contextMenuCounts = contextMenu->EventParams[0].Int;

        const int start = 7;
        var       end   = start + contextMenuCounts;

        for (var i = start; i < end; i++)
        {
            var param = contextMenu->EventParams[i];
            var str   = param.GetValueAsString();

            if (str.Equals(CopyItemNameString, StringComparison.OrdinalIgnoreCase))
                return;
        }

        var prismBoxItem = ContextMenuItemManager.GetPrismBoxItem(args);

        var itemId = prismBoxItem?.RowId ?? ContextMenuItemManager.CurrentItemID;

        if (itemId == 0)
            return;

        MenuItem.SetRawItemId(itemId);
        args.AddMenuItem(MenuItem.Get());

        var glamourId = ContextMenuItemManager.CurrentGlamourID;

        if (glamourId == 0)
            return;

        GlamourMenuItem.SetRawItemId(glamourId);
        args.AddMenuItem(GlamourMenuItem.Get());
    }

    private sealed class CopyItemNameMenuItem : MenuItemBase
    {
        private uint ItemId;

        private ItemPayload.ItemKind ItemKind;

        public CopyItemNameMenuItem(string name)
            => Name = name;

        public override string Name { get; protected set; }

        protected override unsafe void OnClicked(IMenuItemClickedArgs args)
        {
            var itemName = string.Empty;

            if (ItemId >= 2000000 && LuminaGetter.TryGetRow<EventItem>(ItemId, out var eventItem))
                itemName = eventItem.Singular.ExtractText();
            else
            {
                ItemId %= 500000;

                if (LuminaGetter.TryGetRow<Item>(ItemId, out var item))
                    itemName = item.Name.ExtractText();
            }

            if (string.IsNullOrWhiteSpace(itemName))
                return;

            if (LuminaGetter.TryGetRow<LogMessage>(1632, out var logMessage))
            {
                var itemLink = SeString.CreateItemLink(ItemId, ItemKind, itemName);

                var text = logMessage.Text.ToDalamudString();

                var payloads = text.Payloads;

                var idx = payloads.FindIndex(i => i.Type == PayloadType.Unknown);

                if (idx != -1)
                {
                    payloads.RemoveAt(idx);
                    payloads.InsertRange(idx, itemLink.Payloads);
                }

                Chat(new SeString(payloads));
            }
            else
            {
                var logModule = RaptureLogModule.Instance();
                logModule->ShowLogMessageUInt(1632, ItemId);
            }

            ImGui.SetClipboardText(itemName);
            ItemId = 0;
        }

        public void SetRawItemId(uint id)
        {
            ItemId = id;

            ItemKind = id switch
            {
                >= 2000000 or < 500000 => ItemPayload.ItemKind.Normal,
                > 1000000              => ItemPayload.ItemKind.Hq,
                _                      => ItemPayload.ItemKind.Collectible,
            };
        }
    }
}
