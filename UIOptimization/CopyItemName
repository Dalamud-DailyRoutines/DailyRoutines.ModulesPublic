using System;
using DailyRoutines.Abstracts;
using DailyRoutines.Infos;
using Dalamud.Game.Gui.ContextMenu;
using Dalamud.Game.Text.SeStringHandling;
using Dalamud.Game.Text.SeStringHandling.Payloads;
using Dalamud.Utility;
using FFXIVClientStructs.FFXIV.Client.Game;
using FFXIVClientStructs.FFXIV.Client.UI.Agent;
using FFXIVClientStructs.FFXIV.Client.UI.Misc;
using Lumina.Excel.Sheets;

namespace DailyRoutines.ModuleTemplate;

public class CopyItemNameModule : DailyModuleBase
{
    private readonly CopyItemNameMenuItem MenuItem = new ();

    private readonly string TryOnString         = LuminaGetter.GetRow<Addon>(2426)!.Value.Text.ExtractText();
    private readonly string SearchForItemString = LuminaGetter.GetRow<Addon>(4379)!.Value.Text.ExtractText();
    private readonly string CopyItemNameString  = LuminaGetter.GetRow<Addon>(159)!.Value.Text.ExtractText();

    public override ModuleInfo Info { get; } = new ()
    {
        Title       = GetLoc("CopyItemName"),
        Description = GetLoc("CopyItemNameDescription"),
        Category    = ModuleCategories.UIOptimization,
        Author      = ["Nukoooo"],
    };

    public override void Init()
    {
        DService.ContextMenu.OnMenuOpened += OnContextMenuOpened;
    }

    public override void Uninit()
    {
        DService.ContextMenu.OnMenuOpened -= OnContextMenuOpened;

        base.Uninit();
    }

    private unsafe void OnContextMenuOpened(IMenuOpenedArgs args)
    {
        var type = args.MenuType;

        if (type == ContextMenuType.Inventory)
        {
            if (args.Target is MenuTargetInventory { TargetItem: { ItemId: > 0 } item })
            {
                MenuItem.SetRawItemId(item.ItemId);

                args.AddMenuItem(MenuItem.Get());
            }

            return;
        }

        if (string.IsNullOrWhiteSpace(args.AddonName))
            return;

        var agent = (AgentContext*)args.AgentPtr;

        var contextMenu = agent->CurrentContextMenu;

        var contextMenuCounts = contextMenu->EventParams[0].Int;

        const int start = 7;
        var       end   = start + contextMenuCounts;

        nint handler = 0;

        for (var i = start; i < end; i++)
        {
            var param = contextMenu->EventParams[i];
            var str   = param.GetValueAsString();

            if (str.Equals(CopyItemNameString, StringComparison.OrdinalIgnoreCase))
                return;

            if (handler == nint.Zero &&
                (str.Equals(TryOnString,         StringComparison.OrdinalIgnoreCase) ||
                 str.Equals(SearchForItemString, StringComparison.OrdinalIgnoreCase)))
                handler = (nint)contextMenu->EventHandlers[i].Value;
        }

        var itemId = GetItemIdFromAddonName(args.AddonName, handler);

        if (itemId == 0)
            return;

        MenuItem.SetRawItemId(itemId);
        args.AddMenuItem(MenuItem.Get());
    }

    private static unsafe uint GetItemIdFromAddonName(string name, nint eventHandler)
    {
        var hovered = DService.Gui.HoveredItem;

        switch (name)
        {
            case "ColorantColoring":
            {
                var agent = DService.Gui.FindAgentInterface(name);

                return *(uint*)(agent + 0x3C);
            }
            case "GrandCompanyExchange":
            case "ShopExchangeItem":
            {
                var agent = DService.Gui.FindAgentInterface(name);

                return *(uint*)(agent + 0x54);
            }
            case "ChatLog":
            {
                return AgentChatLog.Instance()->ContextItemId;
            }
            case "ItemSearch":
            {
                return (uint)AgentContext.Instance()->UpdateCheckerParam;
            }
            case "CharacterInspect":
            {
                var container = InventoryManager.Instance()->GetInventoryContainer(InventoryType.Examine);
                var agent     = DService.Gui.FindAgentInterface(name);

                var selectedSlot = *(int*)(agent + 0x44C);

                var item = container->GetInventorySlot(selectedSlot);

                return item->GetItemId();
            }
            case "MiragePrismPrismBoxCrystallize":
            {
                if (hovered != 0)
                    return (uint)hovered;

                // 48 8B 57 ? 48 85 D2 74 ? 8B 82 ? ? ? ? 3D ? ? ? ? 73 ? 48 69 C8 ? ? ? ? 44 0F B6 84 11
                var v87 = *(nint*)(eventHandler + 0x28);

                if (v87 == nint.Zero)
                    return 0;

                var v88 = *(uint*)(v87 + 0x10B458);

                if (v88 < 8000)
                    return *(uint*)(136 * v88 + v87 + 116);

                return 0;
            }
            case "FreeCompanyCreditShop":
            {
                var agent = DService.Gui.FindAgentInterface(name);

                return *(uint*)(agent + 0x64);
            }
            case "ContentsFinder":
            {
                // 48 89 74 24 ? 57 48 83 EC ? 48 83 79 ? ? 48 8B F2 48 8B F9 75 ? C7 02
                var v11 = *(nint*)(eventHandler + 0x18);

                if (v11 == nint.Zero)
                    return 0;

                return *(uint*)(v11 + 76);
            }
            case "JournalAccept":
            {
                // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 41 56 41 57 48 83 EC ? 48 8B BC 24 ? ? ? ? 40 32 F6
                var v10 = *(nint*)(eventHandler + 0x30) + 24 * *(int*)(eventHandler + 0x4C);

                return *(uint*)(v10 + 12);
            }
            case "GuildLeve":
            {
                // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 41 56 41 57 48 81 EC ? ? ? ? 48 8B BC 24
                var v10 = *(nint*)(eventHandler + 0x30) + 24 * *(int*)(eventHandler + 0x4C);

                return *(uint*)(v10 + 12);
            }
            case "JournalRewardItem":
            case "Gathering":
            {
                // 40 56 57 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 84 24 ? ? ? ? 48 8B 84 24
                return *(uint*)(eventHandler + 0x28);
            }
        }

        return (uint)hovered;
    }

    private class CopyItemNameMenuItem : MenuItemBase
    {
        private uint ItemId;

        private ItemPayload.ItemKind ItemKind;

        public override string Name { get; protected set; } = LuminaGetter.GetRow<Addon>(159)!.Value.Text.ExtractText();

        public override bool IsDisplay(IMenuOpenedArgs args)
            => ItemId != 0;

        protected override unsafe void OnClicked(IMenuItemClickedArgs args)
        {
            var itemName = string.Empty;

            if (ItemId >= 2000000 && LuminaGetter.TryGetRow<EventItem>(ItemId, out var eventItem))
                itemName = eventItem.Singular.ExtractText();
            else
            {
                ItemId %= 500000;

                if (LuminaGetter.TryGetRow<Item>(ItemId, out var item))
                    itemName = item.Name.ExtractText();
            }

            if (string.IsNullOrWhiteSpace(itemName))
                return;

            if (LuminaGetter.TryGetRow<LogMessage>(1632, out var logMessage))
            {
                var itemLink = SeString.CreateItemLink(ItemId, ItemKind, itemName);

                var text = logMessage.Text.ToDalamudString();

                var payloads = text.Payloads;

                var idx = payloads.FindIndex(i => i.Type == PayloadType.Unknown);

                if (idx != -1)
                {
                    payloads.RemoveAt(idx);
                    payloads.InsertRange(idx, itemLink.Payloads);
                }

                Chat(new SeString(payloads));
            }
            else
            {
                var logModule = RaptureLogModule.Instance();
                logModule->ShowLogMessageUInt(1632, ItemId);
            }

            ImGui.SetClipboardText(itemName);
            ItemId = 0;
        }

        public void SetRawItemId(uint id)
        {
            ItemId = id;

            ItemKind = id switch
            {
                >= 2000000 or < 500000 => ItemPayload.ItemKind.Normal,
                > 1000000              => ItemPayload.ItemKind.Hq,
                _                      => ItemPayload.ItemKind.Collectible,
            };
        }
    }
}
